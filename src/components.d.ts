/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    /**
     * The Alert component serves as a dynamic container for conveying vital notifications and messages.
     * Depending on the context, alerts can adopt various types such as Primary, Danger, Success, Warning, and other relevant variants. Each type visually signifies its importance and relevance.
     * Additionally, to enhance clarity and emphasis, alerts can be complemented with a title. For users desiring an uncluttered interface,
     * the alerts also offer a dismissible feature, enabling them to close the message after acknowledgment. Through all its configurations, the Alert component ensures that key communications remain prominent and clear.
     */
    interface IniAlert {
        /**
          * Allows you to hide the alert if the close button is clicked
         */
        "dismissible": boolean;
        /**
          * (optional) The title of the alert that accompanies the content
         */
        "headerTitle": string;
        /**
          * Context of the alert, if it is an error message: `danger`, an action which is successful: `success` ...
         */
        "variant": "primary" | "secondary" | "success" | "danger" | "warning" | "info";
    }
    /**
     * The Badge component is a compact yet powerful means of showcasing status, highlighting states, or drawing attention to specific data points.
     * With its minimalist design, it effortlessly integrates into various UI contexts, making it a go-to for concise visual feedback
     */
    interface IniBadge {
        /**
          * Variant color of badge
         */
        "variant": "primary" | "secondary" | "success" | "danger" | "warning" | "info";
    }
    /**
     * The Button component stands as an interactive gateway, inviting users to take action, navigate, or submit.
     * With its versatile design, it can signal importance, set priorities, or provide navigational cues.
     * Whether beckoning a user to 'Learn More', confirming a choice with 'Submit', or pausing a task with 'Cancel', the Button ensures every interaction is clear and intentional.
     * > When the `create` button is applied, then the `variant` and `outline` props no longer have priority
     */
    interface IniButton {
        /**
          * Apply the style of a create button
         */
        "create": boolean;
        /**
          * Disable button, user can't have any interaction
         */
        "disabled": boolean;
        /**
          * Additional CSS class to add to the `<button>` if necessary
         */
        "extraClass": string;
        /**
          * Remove the background and highlight the borders
         */
        "outline": boolean;
        /**
          * Button size
         */
        "size": "small" | "medium" | "large";
        /**
          * Color variants of button
         */
        "variant": "primary" | "secondary" | "success" | "danger" | "warning" | "info";
    }
    /**
     * The Card component acts as a versatile container, framing content with a clear visual boundary. Whether showcasing snippets of text,
     * hosting other UI components, or spotlighting information with an optional title, the Card offers a neat and structured presentation.
     * It effectively organizes and emphasizes content, ensuring that information stands out in an engaging manner.
     */
    interface IniCard {
        /**
          * (Optional) the title of the card in the header
         */
        "headerTitle": string;
    }
    /**
     * The Checkbox, Radio and Switch components serves as a versatile tool for capturing user choices. As a Checkbox/Switch it represents binary decisions or enables multi-select options.
     * When set as a Radio, it facilitates single-choice selections among a group of options. Employed in forms and various UI contexts, their states—whether checked,
     * unchecked, or indeterminate—are clearly conveyed. Paired with intuitive labels, this component ensures user selections are both clear and accurate,
     * adapting seamlessly based on the specified type.
     */
    interface IniChoice {
        /**
          * Disable component, user can't have any interaction
         */
        "disabled": boolean;
        /**
          * The id value for input and label attributes
         */
        "groupId": string;
        /**
          * Group checkboxes or radios on the same horizontal row
         */
        "inline": boolean;
        /**
          * The name of the checkbox/radio/switch in the form (example: for radios to create group)
         */
        "name": string;
        /**
          * The id value for input and label attributes
         */
        "type": "checkbox" | "radio" | "switch";
        /**
          * The default value of checkbox/radio/switch
         */
        "value": string;
    }
    /**
     * The Date Picker component simplifies the task of selecting dates by providing a user-friendly interface.
     * Whether setting an appointment, scheduling an event, or marking a milestone, it seamlessly integrates into forms and interfaces.
     * With intuitive navigation through days, months, and years, the Date Picker ensures that capturing a specific date or date range is both precise and effortless.
     * Documentation of used Datepicker : https://mymth.github.io/vanillajs-datepicker
     */
    interface IniDatePicker {
        /**
          * The date format
         */
        "dateFormat": string;
        /**
          * Disable input, user can't have any interaction
         */
        "disabled": boolean;
        /**
          * A help message for the input
         */
        "helpText": string;
        /**
          * The text label to display before input
         */
        "label": string;
        /**
          * The name of the input in the form
         */
        "name": string;
        /**
          * The placeholder
         */
        "placeholder": string;
        /**
          * The default date value
         */
        "value": string;
    }
    /**
     * The Date Range Picker component streamlines the process of selecting a span of dates. Ideal for defining periods such as booking intervals,
     * financial quarters, or event durations, it offers an intuitive interface to capture both start and end dates. Its user-centric design ensures
     * that selecting consecutive days or disparate intervals is straightforward, providing clarity and precision in every date range selection.
     * Documentation of used Datepicker : https://mymth.github.io/vanillajs-datepicker
     */
    interface IniDateRangePicker {
        /**
          * The date format
         */
        "dateFormat": string;
        /**
          * Disable input, user can't have any interaction
         */
        "disabled": boolean;
        /**
          * The name of the *end date* input in the form
         */
        "endName": string;
        /**
          * The *end date* placeholder
         */
        "endPlaceholder": string;
        /**
          * The default *end date* value
         */
        "endValue": string;
        /**
          * A help message for the input
         */
        "helpText": string;
        /**
          * The text label to display before input
         */
        "label": string;
        /**
          * The name of the *start date* input in the form
         */
        "startName": string;
        /**
          * The *start date* placeholder
         */
        "startPlaceholder": string;
        /**
          * The default *start date* value
         */
        "startValue": string;
    }
    /**
     * The Dropdown component offers a compact way to present multiple options without overwhelming the interface.
     * By clicking or hovering, users can unveil a list of choices, making selections both space-efficient and user-friendly.
     * Whether used for navigation, action lists, or form inputs, the Dropdown ensures a smooth experience, guiding users through their options with elegance and simplicity.
     * This component use the Popper library : https://popper.js.org/docs/v2/
     */
    interface IniDropdown {
        /**
          * Disable Dropdown trigger button, user can't have any interaction
         */
        "disabled": boolean;
        /**
          * The label to display inside dropdown trigger button
         */
        "label": string;
        /**
          * Remove the background and highlight the borders
         */
        "outline": boolean;
        /**
          * The default location when opening the dropdown
         */
        "placement": "top" | "bottom" | "right" | "left";
        /**
          * The Dropdown trigger button size
         */
        "size": "small" | "medium" | "large";
    }
    /**
     * Form Input components are the essential touchpoints of user data entry. From simple text fields capturing names to specialized inputs like emails or color pickers,
     * they transform user interactions into actionable data. Designed for clarity and ease of use, these components ensure that users effortlessly provide information,
     * whether its personal details, preferences, or any specific input. Every interaction is optimized for accuracy, ensuring data integrity across varied input types.
     */
    interface IniInput {
        /**
          * Disable input, user can't have any interaction
         */
        "disabled": boolean;
        "getInputRef": () => Promise<HTMLElement>;
        /**
          * The id value for input and label attributes
         */
        "groupId": string;
        /**
          * A help message for the input
         */
        "helpText": string;
        /**
          * Show input and label on a single line
         */
        "inline": boolean;
        /**
          * The text label to display before input
         */
        "label": string;
        /**
          * The name of the input in the form
         */
        "name": string;
        /**
          * The placeholder
         */
        "placeholder": string;
        /**
          * Icon to display as prefix of the input `example: fa-solid fa-user or zmdi-user...`
         */
        "prefixIcon": string;
        /**
          * Text to display as prefix of the input
         */
        "prefixText": string;
        /**
          * The input size
         */
        "size": "small" | "medium" | "large";
        /**
          * Icon to display as suffix of the input `example: fa-solid fa-user or zmdi-user...`
         */
        "suffixIcon": string;
        /**
          * Text to display as suffix of the input
         */
        "suffixText": string;
        /**
          * The type of input in the form
         */
        "type": "text" | "password" | "email" | "number" | "search" | "tel" | "url" | "color" | "file" | "textarea";
        /**
          * The default value of input
         */
        "value": string;
    }
    /**
     * The Modal component emerges as a focused overlay, capturing users' full attention to deliver essential content or actions.
     * Whether presenting vital information, confirming user decisions, or offering supplemental details, the Modal provides an immersive environment, momentarily separating users from the main interface.
     * Its distinct presence ensures that the information or actions within are both central and prioritized, facilitating focused interactions.
     */
    interface IniModal {
        /**
          * Center the modal vertically
         */
        "centerY": boolean;
        /**
          * The close button label
         */
        "closeLabel": string;
        /**
          * The title in the modal header
         */
        "headerTitle": string;
        /**
          * Open or close the modal
         */
        "open": boolean;
    }
    /**
     * The Select control offers an intuitive way to present a list of options to users. It allows for easy single or multiple selections from a dropdown menu.
     * Additionally, some select controls provide the ability to search or type in text, offering users an even more streamlined experience.
     * Whether you're choosing from a predefined list or inputting new information, the Select control is designed to handle both with efficiency.
     * Plus, with built-in functions for adding or removing options, it ensures a dynamic user interaction that adapts to various needs.
     * This component use TomSelect library : https://tom-select.js.org/docs/
     */
    interface IniSelect {
        /**
          * May be empty
         */
        "allowEmpty": boolean;
        /**
          * Disable select, user can't have any interaction
         */
        "disabled": boolean;
        /**
          * The id value for select and label attributes
         */
        "groupId": string;
        /**
          * A help message for the select
         */
        "helpText": string;
        /**
          * The text label to display before select
         */
        "label": string;
        /**
          * Can have and select multiple values
         */
        "multiple": boolean;
        /**
          * The name of the select input in the form
         */
        "name": string;
        /**
          * The placeholder
         */
        "placeholder": string;
        /**
          * Pass the values selected by default (for multiple values must be used a delimiter between the values example: `apple,grape,orange`)
         */
        "selected": string;
    }
    /**
     * The Tooltip component acts as a brief informational aide, offering users additional context or guidance when they hover or focus on an element.
     * Subtle yet informative, it unveils insights without disrupting the user flow. Whether elucidating an icon's function,
     * providing supplementary data, or explaining a term, the Tooltip ensures clarity is just a hover away.
     * > The content which must display the tooltip when hovering must be wrapped by `<ini-tooltip>`, can be text, button, any other elements
     * This component use the Popper library : https://popper.js.org/docs/v2/
     */
    interface IniTooltip {
        /**
          * Where should the tooltip be displayed by bringing the element, if the tooltip leaves the parent container, then it will be replaced automatically
         */
        "placement": "top" | "bottom" | "right" | "left";
        /**
          * The content to display in the tooltip when hovering
         */
        "titleContent": string;
    }
}
export interface IniButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIniButtonElement;
}
declare global {
    /**
     * The Alert component serves as a dynamic container for conveying vital notifications and messages.
     * Depending on the context, alerts can adopt various types such as Primary, Danger, Success, Warning, and other relevant variants. Each type visually signifies its importance and relevance.
     * Additionally, to enhance clarity and emphasis, alerts can be complemented with a title. For users desiring an uncluttered interface,
     * the alerts also offer a dismissible feature, enabling them to close the message after acknowledgment. Through all its configurations, the Alert component ensures that key communications remain prominent and clear.
     */
    interface HTMLIniAlertElement extends Components.IniAlert, HTMLStencilElement {
    }
    var HTMLIniAlertElement: {
        prototype: HTMLIniAlertElement;
        new (): HTMLIniAlertElement;
    };
    /**
     * The Badge component is a compact yet powerful means of showcasing status, highlighting states, or drawing attention to specific data points.
     * With its minimalist design, it effortlessly integrates into various UI contexts, making it a go-to for concise visual feedback
     */
    interface HTMLIniBadgeElement extends Components.IniBadge, HTMLStencilElement {
    }
    var HTMLIniBadgeElement: {
        prototype: HTMLIniBadgeElement;
        new (): HTMLIniBadgeElement;
    };
    /**
     * The Button component stands as an interactive gateway, inviting users to take action, navigate, or submit.
     * With its versatile design, it can signal importance, set priorities, or provide navigational cues.
     * Whether beckoning a user to 'Learn More', confirming a choice with 'Submit', or pausing a task with 'Cancel', the Button ensures every interaction is clear and intentional.
     * > When the `create` button is applied, then the `variant` and `outline` props no longer have priority
     */
    interface HTMLIniButtonElement extends Components.IniButton, HTMLStencilElement {
    }
    var HTMLIniButtonElement: {
        prototype: HTMLIniButtonElement;
        new (): HTMLIniButtonElement;
    };
    /**
     * The Card component acts as a versatile container, framing content with a clear visual boundary. Whether showcasing snippets of text,
     * hosting other UI components, or spotlighting information with an optional title, the Card offers a neat and structured presentation.
     * It effectively organizes and emphasizes content, ensuring that information stands out in an engaging manner.
     */
    interface HTMLIniCardElement extends Components.IniCard, HTMLStencilElement {
    }
    var HTMLIniCardElement: {
        prototype: HTMLIniCardElement;
        new (): HTMLIniCardElement;
    };
    /**
     * The Checkbox, Radio and Switch components serves as a versatile tool for capturing user choices. As a Checkbox/Switch it represents binary decisions or enables multi-select options.
     * When set as a Radio, it facilitates single-choice selections among a group of options. Employed in forms and various UI contexts, their states—whether checked,
     * unchecked, or indeterminate—are clearly conveyed. Paired with intuitive labels, this component ensures user selections are both clear and accurate,
     * adapting seamlessly based on the specified type.
     */
    interface HTMLIniChoiceElement extends Components.IniChoice, HTMLStencilElement {
    }
    var HTMLIniChoiceElement: {
        prototype: HTMLIniChoiceElement;
        new (): HTMLIniChoiceElement;
    };
    /**
     * The Date Picker component simplifies the task of selecting dates by providing a user-friendly interface.
     * Whether setting an appointment, scheduling an event, or marking a milestone, it seamlessly integrates into forms and interfaces.
     * With intuitive navigation through days, months, and years, the Date Picker ensures that capturing a specific date or date range is both precise and effortless.
     * Documentation of used Datepicker : https://mymth.github.io/vanillajs-datepicker
     */
    interface HTMLIniDatePickerElement extends Components.IniDatePicker, HTMLStencilElement {
    }
    var HTMLIniDatePickerElement: {
        prototype: HTMLIniDatePickerElement;
        new (): HTMLIniDatePickerElement;
    };
    /**
     * The Date Range Picker component streamlines the process of selecting a span of dates. Ideal for defining periods such as booking intervals,
     * financial quarters, or event durations, it offers an intuitive interface to capture both start and end dates. Its user-centric design ensures
     * that selecting consecutive days or disparate intervals is straightforward, providing clarity and precision in every date range selection.
     * Documentation of used Datepicker : https://mymth.github.io/vanillajs-datepicker
     */
    interface HTMLIniDateRangePickerElement extends Components.IniDateRangePicker, HTMLStencilElement {
    }
    var HTMLIniDateRangePickerElement: {
        prototype: HTMLIniDateRangePickerElement;
        new (): HTMLIniDateRangePickerElement;
    };
    /**
     * The Dropdown component offers a compact way to present multiple options without overwhelming the interface.
     * By clicking or hovering, users can unveil a list of choices, making selections both space-efficient and user-friendly.
     * Whether used for navigation, action lists, or form inputs, the Dropdown ensures a smooth experience, guiding users through their options with elegance and simplicity.
     * This component use the Popper library : https://popper.js.org/docs/v2/
     */
    interface HTMLIniDropdownElement extends Components.IniDropdown, HTMLStencilElement {
    }
    var HTMLIniDropdownElement: {
        prototype: HTMLIniDropdownElement;
        new (): HTMLIniDropdownElement;
    };
    /**
     * Form Input components are the essential touchpoints of user data entry. From simple text fields capturing names to specialized inputs like emails or color pickers,
     * they transform user interactions into actionable data. Designed for clarity and ease of use, these components ensure that users effortlessly provide information,
     * whether its personal details, preferences, or any specific input. Every interaction is optimized for accuracy, ensuring data integrity across varied input types.
     */
    interface HTMLIniInputElement extends Components.IniInput, HTMLStencilElement {
    }
    var HTMLIniInputElement: {
        prototype: HTMLIniInputElement;
        new (): HTMLIniInputElement;
    };
    /**
     * The Modal component emerges as a focused overlay, capturing users' full attention to deliver essential content or actions.
     * Whether presenting vital information, confirming user decisions, or offering supplemental details, the Modal provides an immersive environment, momentarily separating users from the main interface.
     * Its distinct presence ensures that the information or actions within are both central and prioritized, facilitating focused interactions.
     */
    interface HTMLIniModalElement extends Components.IniModal, HTMLStencilElement {
    }
    var HTMLIniModalElement: {
        prototype: HTMLIniModalElement;
        new (): HTMLIniModalElement;
    };
    /**
     * The Select control offers an intuitive way to present a list of options to users. It allows for easy single or multiple selections from a dropdown menu.
     * Additionally, some select controls provide the ability to search or type in text, offering users an even more streamlined experience.
     * Whether you're choosing from a predefined list or inputting new information, the Select control is designed to handle both with efficiency.
     * Plus, with built-in functions for adding or removing options, it ensures a dynamic user interaction that adapts to various needs.
     * This component use TomSelect library : https://tom-select.js.org/docs/
     */
    interface HTMLIniSelectElement extends Components.IniSelect, HTMLStencilElement {
    }
    var HTMLIniSelectElement: {
        prototype: HTMLIniSelectElement;
        new (): HTMLIniSelectElement;
    };
    /**
     * The Tooltip component acts as a brief informational aide, offering users additional context or guidance when they hover or focus on an element.
     * Subtle yet informative, it unveils insights without disrupting the user flow. Whether elucidating an icon's function,
     * providing supplementary data, or explaining a term, the Tooltip ensures clarity is just a hover away.
     * > The content which must display the tooltip when hovering must be wrapped by `<ini-tooltip>`, can be text, button, any other elements
     * This component use the Popper library : https://popper.js.org/docs/v2/
     */
    interface HTMLIniTooltipElement extends Components.IniTooltip, HTMLStencilElement {
    }
    var HTMLIniTooltipElement: {
        prototype: HTMLIniTooltipElement;
        new (): HTMLIniTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "ini-alert": HTMLIniAlertElement;
        "ini-badge": HTMLIniBadgeElement;
        "ini-button": HTMLIniButtonElement;
        "ini-card": HTMLIniCardElement;
        "ini-choice": HTMLIniChoiceElement;
        "ini-date-picker": HTMLIniDatePickerElement;
        "ini-date-range-picker": HTMLIniDateRangePickerElement;
        "ini-dropdown": HTMLIniDropdownElement;
        "ini-input": HTMLIniInputElement;
        "ini-modal": HTMLIniModalElement;
        "ini-select": HTMLIniSelectElement;
        "ini-tooltip": HTMLIniTooltipElement;
    }
}
declare namespace LocalJSX {
    /**
     * The Alert component serves as a dynamic container for conveying vital notifications and messages.
     * Depending on the context, alerts can adopt various types such as Primary, Danger, Success, Warning, and other relevant variants. Each type visually signifies its importance and relevance.
     * Additionally, to enhance clarity and emphasis, alerts can be complemented with a title. For users desiring an uncluttered interface,
     * the alerts also offer a dismissible feature, enabling them to close the message after acknowledgment. Through all its configurations, the Alert component ensures that key communications remain prominent and clear.
     */
    interface IniAlert {
        /**
          * Allows you to hide the alert if the close button is clicked
         */
        "dismissible"?: boolean;
        /**
          * (optional) The title of the alert that accompanies the content
         */
        "headerTitle"?: string;
        /**
          * Context of the alert, if it is an error message: `danger`, an action which is successful: `success` ...
         */
        "variant"?: "primary" | "secondary" | "success" | "danger" | "warning" | "info";
    }
    /**
     * The Badge component is a compact yet powerful means of showcasing status, highlighting states, or drawing attention to specific data points.
     * With its minimalist design, it effortlessly integrates into various UI contexts, making it a go-to for concise visual feedback
     */
    interface IniBadge {
        /**
          * Variant color of badge
         */
        "variant"?: "primary" | "secondary" | "success" | "danger" | "warning" | "info";
    }
    /**
     * The Button component stands as an interactive gateway, inviting users to take action, navigate, or submit.
     * With its versatile design, it can signal importance, set priorities, or provide navigational cues.
     * Whether beckoning a user to 'Learn More', confirming a choice with 'Submit', or pausing a task with 'Cancel', the Button ensures every interaction is clear and intentional.
     * > When the `create` button is applied, then the `variant` and `outline` props no longer have priority
     */
    interface IniButton {
        /**
          * Apply the style of a create button
         */
        "create"?: boolean;
        /**
          * Disable button, user can't have any interaction
         */
        "disabled"?: boolean;
        /**
          * Additional CSS class to add to the `<button>` if necessary
         */
        "extraClass"?: string;
        /**
          * When user click on button
         */
        "onIniClick"?: (event: IniButtonCustomEvent<any>) => void;
        /**
          * Remove the background and highlight the borders
         */
        "outline"?: boolean;
        /**
          * Button size
         */
        "size"?: "small" | "medium" | "large";
        /**
          * Color variants of button
         */
        "variant"?: "primary" | "secondary" | "success" | "danger" | "warning" | "info";
    }
    /**
     * The Card component acts as a versatile container, framing content with a clear visual boundary. Whether showcasing snippets of text,
     * hosting other UI components, or spotlighting information with an optional title, the Card offers a neat and structured presentation.
     * It effectively organizes and emphasizes content, ensuring that information stands out in an engaging manner.
     */
    interface IniCard {
        /**
          * (Optional) the title of the card in the header
         */
        "headerTitle"?: string;
    }
    /**
     * The Checkbox, Radio and Switch components serves as a versatile tool for capturing user choices. As a Checkbox/Switch it represents binary decisions or enables multi-select options.
     * When set as a Radio, it facilitates single-choice selections among a group of options. Employed in forms and various UI contexts, their states—whether checked,
     * unchecked, or indeterminate—are clearly conveyed. Paired with intuitive labels, this component ensures user selections are both clear and accurate,
     * adapting seamlessly based on the specified type.
     */
    interface IniChoice {
        /**
          * Disable component, user can't have any interaction
         */
        "disabled"?: boolean;
        /**
          * The id value for input and label attributes
         */
        "groupId"?: string;
        /**
          * Group checkboxes or radios on the same horizontal row
         */
        "inline"?: boolean;
        /**
          * The name of the checkbox/radio/switch in the form (example: for radios to create group)
         */
        "name"?: string;
        /**
          * The id value for input and label attributes
         */
        "type"?: "checkbox" | "radio" | "switch";
        /**
          * The default value of checkbox/radio/switch
         */
        "value"?: string;
    }
    /**
     * The Date Picker component simplifies the task of selecting dates by providing a user-friendly interface.
     * Whether setting an appointment, scheduling an event, or marking a milestone, it seamlessly integrates into forms and interfaces.
     * With intuitive navigation through days, months, and years, the Date Picker ensures that capturing a specific date or date range is both precise and effortless.
     * Documentation of used Datepicker : https://mymth.github.io/vanillajs-datepicker
     */
    interface IniDatePicker {
        /**
          * The date format
         */
        "dateFormat"?: string;
        /**
          * Disable input, user can't have any interaction
         */
        "disabled"?: boolean;
        /**
          * A help message for the input
         */
        "helpText"?: string;
        /**
          * The text label to display before input
         */
        "label"?: string;
        /**
          * The name of the input in the form
         */
        "name"?: string;
        /**
          * The placeholder
         */
        "placeholder"?: string;
        /**
          * The default date value
         */
        "value"?: string;
    }
    /**
     * The Date Range Picker component streamlines the process of selecting a span of dates. Ideal for defining periods such as booking intervals,
     * financial quarters, or event durations, it offers an intuitive interface to capture both start and end dates. Its user-centric design ensures
     * that selecting consecutive days or disparate intervals is straightforward, providing clarity and precision in every date range selection.
     * Documentation of used Datepicker : https://mymth.github.io/vanillajs-datepicker
     */
    interface IniDateRangePicker {
        /**
          * The date format
         */
        "dateFormat"?: string;
        /**
          * Disable input, user can't have any interaction
         */
        "disabled"?: boolean;
        /**
          * The name of the *end date* input in the form
         */
        "endName"?: string;
        /**
          * The *end date* placeholder
         */
        "endPlaceholder"?: string;
        /**
          * The default *end date* value
         */
        "endValue"?: string;
        /**
          * A help message for the input
         */
        "helpText"?: string;
        /**
          * The text label to display before input
         */
        "label"?: string;
        /**
          * The name of the *start date* input in the form
         */
        "startName"?: string;
        /**
          * The *start date* placeholder
         */
        "startPlaceholder"?: string;
        /**
          * The default *start date* value
         */
        "startValue"?: string;
    }
    /**
     * The Dropdown component offers a compact way to present multiple options without overwhelming the interface.
     * By clicking or hovering, users can unveil a list of choices, making selections both space-efficient and user-friendly.
     * Whether used for navigation, action lists, or form inputs, the Dropdown ensures a smooth experience, guiding users through their options with elegance and simplicity.
     * This component use the Popper library : https://popper.js.org/docs/v2/
     */
    interface IniDropdown {
        /**
          * Disable Dropdown trigger button, user can't have any interaction
         */
        "disabled"?: boolean;
        /**
          * The label to display inside dropdown trigger button
         */
        "label"?: string;
        /**
          * Remove the background and highlight the borders
         */
        "outline"?: boolean;
        /**
          * The default location when opening the dropdown
         */
        "placement"?: "top" | "bottom" | "right" | "left";
        /**
          * The Dropdown trigger button size
         */
        "size"?: "small" | "medium" | "large";
    }
    /**
     * Form Input components are the essential touchpoints of user data entry. From simple text fields capturing names to specialized inputs like emails or color pickers,
     * they transform user interactions into actionable data. Designed for clarity and ease of use, these components ensure that users effortlessly provide information,
     * whether its personal details, preferences, or any specific input. Every interaction is optimized for accuracy, ensuring data integrity across varied input types.
     */
    interface IniInput {
        /**
          * Disable input, user can't have any interaction
         */
        "disabled"?: boolean;
        /**
          * The id value for input and label attributes
         */
        "groupId"?: string;
        /**
          * A help message for the input
         */
        "helpText"?: string;
        /**
          * Show input and label on a single line
         */
        "inline"?: boolean;
        /**
          * The text label to display before input
         */
        "label"?: string;
        /**
          * The name of the input in the form
         */
        "name"?: string;
        /**
          * The placeholder
         */
        "placeholder"?: string;
        /**
          * Icon to display as prefix of the input `example: fa-solid fa-user or zmdi-user...`
         */
        "prefixIcon"?: string;
        /**
          * Text to display as prefix of the input
         */
        "prefixText"?: string;
        /**
          * The input size
         */
        "size"?: "small" | "medium" | "large";
        /**
          * Icon to display as suffix of the input `example: fa-solid fa-user or zmdi-user...`
         */
        "suffixIcon"?: string;
        /**
          * Text to display as suffix of the input
         */
        "suffixText"?: string;
        /**
          * The type of input in the form
         */
        "type"?: "text" | "password" | "email" | "number" | "search" | "tel" | "url" | "color" | "file" | "textarea";
        /**
          * The default value of input
         */
        "value"?: string;
    }
    /**
     * The Modal component emerges as a focused overlay, capturing users' full attention to deliver essential content or actions.
     * Whether presenting vital information, confirming user decisions, or offering supplemental details, the Modal provides an immersive environment, momentarily separating users from the main interface.
     * Its distinct presence ensures that the information or actions within are both central and prioritized, facilitating focused interactions.
     */
    interface IniModal {
        /**
          * Center the modal vertically
         */
        "centerY"?: boolean;
        /**
          * The close button label
         */
        "closeLabel"?: string;
        /**
          * The title in the modal header
         */
        "headerTitle"?: string;
        /**
          * Open or close the modal
         */
        "open"?: boolean;
    }
    /**
     * The Select control offers an intuitive way to present a list of options to users. It allows for easy single or multiple selections from a dropdown menu.
     * Additionally, some select controls provide the ability to search or type in text, offering users an even more streamlined experience.
     * Whether you're choosing from a predefined list or inputting new information, the Select control is designed to handle both with efficiency.
     * Plus, with built-in functions for adding or removing options, it ensures a dynamic user interaction that adapts to various needs.
     * This component use TomSelect library : https://tom-select.js.org/docs/
     */
    interface IniSelect {
        /**
          * May be empty
         */
        "allowEmpty"?: boolean;
        /**
          * Disable select, user can't have any interaction
         */
        "disabled"?: boolean;
        /**
          * The id value for select and label attributes
         */
        "groupId"?: string;
        /**
          * A help message for the select
         */
        "helpText"?: string;
        /**
          * The text label to display before select
         */
        "label"?: string;
        /**
          * Can have and select multiple values
         */
        "multiple"?: boolean;
        /**
          * The name of the select input in the form
         */
        "name"?: string;
        /**
          * The placeholder
         */
        "placeholder"?: string;
        /**
          * Pass the values selected by default (for multiple values must be used a delimiter between the values example: `apple,grape,orange`)
         */
        "selected"?: string;
    }
    /**
     * The Tooltip component acts as a brief informational aide, offering users additional context or guidance when they hover or focus on an element.
     * Subtle yet informative, it unveils insights without disrupting the user flow. Whether elucidating an icon's function,
     * providing supplementary data, or explaining a term, the Tooltip ensures clarity is just a hover away.
     * > The content which must display the tooltip when hovering must be wrapped by `<ini-tooltip>`, can be text, button, any other elements
     * This component use the Popper library : https://popper.js.org/docs/v2/
     */
    interface IniTooltip {
        /**
          * Where should the tooltip be displayed by bringing the element, if the tooltip leaves the parent container, then it will be replaced automatically
         */
        "placement"?: "top" | "bottom" | "right" | "left";
        /**
          * The content to display in the tooltip when hovering
         */
        "titleContent"?: string;
    }
    interface IntrinsicElements {
        "ini-alert": IniAlert;
        "ini-badge": IniBadge;
        "ini-button": IniButton;
        "ini-card": IniCard;
        "ini-choice": IniChoice;
        "ini-date-picker": IniDatePicker;
        "ini-date-range-picker": IniDateRangePicker;
        "ini-dropdown": IniDropdown;
        "ini-input": IniInput;
        "ini-modal": IniModal;
        "ini-select": IniSelect;
        "ini-tooltip": IniTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * The Alert component serves as a dynamic container for conveying vital notifications and messages.
             * Depending on the context, alerts can adopt various types such as Primary, Danger, Success, Warning, and other relevant variants. Each type visually signifies its importance and relevance.
             * Additionally, to enhance clarity and emphasis, alerts can be complemented with a title. For users desiring an uncluttered interface,
             * the alerts also offer a dismissible feature, enabling them to close the message after acknowledgment. Through all its configurations, the Alert component ensures that key communications remain prominent and clear.
             */
            "ini-alert": LocalJSX.IniAlert & JSXBase.HTMLAttributes<HTMLIniAlertElement>;
            /**
             * The Badge component is a compact yet powerful means of showcasing status, highlighting states, or drawing attention to specific data points.
             * With its minimalist design, it effortlessly integrates into various UI contexts, making it a go-to for concise visual feedback
             */
            "ini-badge": LocalJSX.IniBadge & JSXBase.HTMLAttributes<HTMLIniBadgeElement>;
            /**
             * The Button component stands as an interactive gateway, inviting users to take action, navigate, or submit.
             * With its versatile design, it can signal importance, set priorities, or provide navigational cues.
             * Whether beckoning a user to 'Learn More', confirming a choice with 'Submit', or pausing a task with 'Cancel', the Button ensures every interaction is clear and intentional.
             * > When the `create` button is applied, then the `variant` and `outline` props no longer have priority
             */
            "ini-button": LocalJSX.IniButton & JSXBase.HTMLAttributes<HTMLIniButtonElement>;
            /**
             * The Card component acts as a versatile container, framing content with a clear visual boundary. Whether showcasing snippets of text,
             * hosting other UI components, or spotlighting information with an optional title, the Card offers a neat and structured presentation.
             * It effectively organizes and emphasizes content, ensuring that information stands out in an engaging manner.
             */
            "ini-card": LocalJSX.IniCard & JSXBase.HTMLAttributes<HTMLIniCardElement>;
            /**
             * The Checkbox, Radio and Switch components serves as a versatile tool for capturing user choices. As a Checkbox/Switch it represents binary decisions or enables multi-select options.
             * When set as a Radio, it facilitates single-choice selections among a group of options. Employed in forms and various UI contexts, their states—whether checked,
             * unchecked, or indeterminate—are clearly conveyed. Paired with intuitive labels, this component ensures user selections are both clear and accurate,
             * adapting seamlessly based on the specified type.
             */
            "ini-choice": LocalJSX.IniChoice & JSXBase.HTMLAttributes<HTMLIniChoiceElement>;
            /**
             * The Date Picker component simplifies the task of selecting dates by providing a user-friendly interface.
             * Whether setting an appointment, scheduling an event, or marking a milestone, it seamlessly integrates into forms and interfaces.
             * With intuitive navigation through days, months, and years, the Date Picker ensures that capturing a specific date or date range is both precise and effortless.
             * Documentation of used Datepicker : https://mymth.github.io/vanillajs-datepicker
             */
            "ini-date-picker": LocalJSX.IniDatePicker & JSXBase.HTMLAttributes<HTMLIniDatePickerElement>;
            /**
             * The Date Range Picker component streamlines the process of selecting a span of dates. Ideal for defining periods such as booking intervals,
             * financial quarters, or event durations, it offers an intuitive interface to capture both start and end dates. Its user-centric design ensures
             * that selecting consecutive days or disparate intervals is straightforward, providing clarity and precision in every date range selection.
             * Documentation of used Datepicker : https://mymth.github.io/vanillajs-datepicker
             */
            "ini-date-range-picker": LocalJSX.IniDateRangePicker & JSXBase.HTMLAttributes<HTMLIniDateRangePickerElement>;
            /**
             * The Dropdown component offers a compact way to present multiple options without overwhelming the interface.
             * By clicking or hovering, users can unveil a list of choices, making selections both space-efficient and user-friendly.
             * Whether used for navigation, action lists, or form inputs, the Dropdown ensures a smooth experience, guiding users through their options with elegance and simplicity.
             * This component use the Popper library : https://popper.js.org/docs/v2/
             */
            "ini-dropdown": LocalJSX.IniDropdown & JSXBase.HTMLAttributes<HTMLIniDropdownElement>;
            /**
             * Form Input components are the essential touchpoints of user data entry. From simple text fields capturing names to specialized inputs like emails or color pickers,
             * they transform user interactions into actionable data. Designed for clarity and ease of use, these components ensure that users effortlessly provide information,
             * whether its personal details, preferences, or any specific input. Every interaction is optimized for accuracy, ensuring data integrity across varied input types.
             */
            "ini-input": LocalJSX.IniInput & JSXBase.HTMLAttributes<HTMLIniInputElement>;
            /**
             * The Modal component emerges as a focused overlay, capturing users' full attention to deliver essential content or actions.
             * Whether presenting vital information, confirming user decisions, or offering supplemental details, the Modal provides an immersive environment, momentarily separating users from the main interface.
             * Its distinct presence ensures that the information or actions within are both central and prioritized, facilitating focused interactions.
             */
            "ini-modal": LocalJSX.IniModal & JSXBase.HTMLAttributes<HTMLIniModalElement>;
            /**
             * The Select control offers an intuitive way to present a list of options to users. It allows for easy single or multiple selections from a dropdown menu.
             * Additionally, some select controls provide the ability to search or type in text, offering users an even more streamlined experience.
             * Whether you're choosing from a predefined list or inputting new information, the Select control is designed to handle both with efficiency.
             * Plus, with built-in functions for adding or removing options, it ensures a dynamic user interaction that adapts to various needs.
             * This component use TomSelect library : https://tom-select.js.org/docs/
             */
            "ini-select": LocalJSX.IniSelect & JSXBase.HTMLAttributes<HTMLIniSelectElement>;
            /**
             * The Tooltip component acts as a brief informational aide, offering users additional context or guidance when they hover or focus on an element.
             * Subtle yet informative, it unveils insights without disrupting the user flow. Whether elucidating an icon's function,
             * providing supplementary data, or explaining a term, the Tooltip ensures clarity is just a hover away.
             * > The content which must display the tooltip when hovering must be wrapped by `<ini-tooltip>`, can be text, button, any other elements
             * This component use the Popper library : https://popper.js.org/docs/v2/
             */
            "ini-tooltip": LocalJSX.IniTooltip & JSXBase.HTMLAttributes<HTMLIniTooltipElement>;
        }
    }
}
